#!/usr/bin/perl -w

use strict;
use warnings;#give a warning message when error occured
use diagnostics; #When you do not understand the warning message, use it to learn   more info.It cost a lot of resource!
use Scalar::Util qw(looks_like_number);   #used to test numeric value. OR if ($var  =~ /^[+-]?/d+/$/ ){...}
use Term::ANSIColor; #Set the text color for output. color: red, cyan, green,       yellow, blue,CLEAR, RESET, BOLD, DARK, UNDERLINE, UNDERSCORE, BLINK, REVERSE,       CONCEALED, BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, ON_BLACK, ON_RED, ON_GREEN, ON_YELLOW, ON_BLUE, ON_MAGENTA, ON_CYAN, and ON_WHITE 

my $TRJ_COORD_START=10; # constant value for the 1st coordination line no in dump file
my $DUMP_FILE_NAME="dump.Surface.lammpstrj";
my $ITEM_TIMESTEP="ITEM: TIMESTEP";
my $ITEM_ATOM_NO="ITEM: NUMBER OF ATOMS";
my $ITEM_BOX="ITEM: BOX BOUNDS pp pp pp";
my $ITEM_COORD="ITEM: ATOMS id type q xs ys zs ix iy iz";
my $file_name;          # store file name
my $tmp_file;           # store file name with suffix ".tmp"

# Initialization of the variables for format
my $title;
my $time;
my $max_num = 0;
my $res_num = 0;
my $res_nam = "A";
my $atm_nam = "A";
my $atm_num = 0;
my $x = 0;
my $y = 0;
my $z = 0;
my $dx = 0;
my $dy = 0;
my $dz = 0;
my $vx = 0;
my $vy = 0;
my $vz = 0;

# Initialize variable
my $line;
my $i = 0;
my $item_i;
my @values;
my @num;
my @name;
my @pos_x;
my @pos_y;
my @pos_z;
my @vel_x;
my @vel_y;
my @vel_z;
my $trj_count;
my $line_no;
my $atom_no;
my $xx;
my $yy;
my $zz;
my $j;
my $k;
my $tmp;
my @elements;

##########################################################
# Gromacs format

format GROMACS_HEAD =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<@<<<<<<<<<<<<<<
$title, $time
@<<<<<<
$max_num
.

format GROMACS =
@>>>>@<<<<@>>>>@>>>>@###.###@###.###@###.###@##.####@##.####@##.####
$res_num, $res_nam, $atm_nam, $atm_num, $x, $y, $z, $vx, $vy, $vz
.

format GROMACS_TAIL =
End of Page @###.#####@###.#####@###.#####
            $dx, $dy, $dz
.
###########################################################################

print colored("Note:","bold yellow blink"),colored("$DUMP_FILE_NAME","bold cyan")," is defaulted dump file name.\n";
print colored("If you use different name, please change it to ","bold yellow"),colored("$DUMP_FILE_NAME","bold cyan"),".\n\n";
print "Input LAMMPS data file (in which includes MASSES info. for LAMMPS reading) name:";
$_=<STDIN>;
chomp($_);
$_=~s/^\s+|\s+$//g;
$file_name=$_;
#$file_name="water.gro";
$tmp_file=$file_name.".tmp";

if (not -e $file_name)
{print "$file_name does NOT exist. Quit.\n";}
else
{  system("sed -n '/Masses/,/Atoms/w $tmp_file' $file_name");

   open(TEMP, "<$tmp_file");
   $i=0;
   while ($line=<TEMP>)
   {
      chomp($line);
      $line=~s/^\s+|\s+$//g;
      @values=split(/\s+/,$line);
      if ($#values >0)
      {  $i++;
         $elements[$i][1]=$values[0];
         $elements[$i][2]=$values[3];
         $tmp=$values[3];
         $elements[$i][3]=0;     # no. for duplicated elements
         $k=0;
         for ($j=1;$j<=scalar(grep $_,@elements);$j++)
         {if ($tmp eq $elements[$j][2]){$k++;$elements[$j][3]=$k;}}#end for ($j=1;$j<=$#elements;$j++)

#         print "$elements[$i][1]\t$elements[$i][2]\t$elements[$i][3]\n";        

      }#end if($#values >0)
   }#end while($line=<TEMP>)
   close(TEMP);

#   system("ls *.lammpstrj");
##   print "Input data file name:";
##   $_=<STDIN>;
##   chomp($_);
##   $_=~s/^\s+|\s+$//g;
##   $gro_file_name=$_;
   $file_name=$DUMP_FILE_NAME.".gro";
#   $file_name="dump.gro";

#open (INFILE, "<$DUMP_FILE_NAME") or die("Could not open  file.");
open (INFILE, "<dump.Surface.lammpstrj") or die("Could not open  file.");
open (OUTFILE, ">format.out");
select (OUTFILE);
$^ = "GROMACS_HEAD";
$~ = "GROMACS";
$~ = "GROMACS_TAIL";
#$title = "LAMMPS to gro file generated by wlamp2gro.pl. t=";

$i = 0;
while ($line=<INFILE>)
{
      $i++;
      chomp($line);
      $line=~s/^\s+|\s+$//g;
      @values=split(/\s+/,$line);

      if($values[0] eq "ITEM:"){$item_i++;}
      $_=$item_i%4;
      if ($_ ==0 ){$item_i=0;$trj_count++;}
      
      if($item_i==2 and $#values==0){$atom_no=$values[0];}

      if($i>3){$line_no=$i%($atom_no+9);}       # atom no locate the 3rd line
      else{$line_no=$i;}

      if($item_i==3 and $line_no ==6 and $#values ==1){$xx=($values[1]-$values[0])/10;}
      if($item_i==3 and $line_no ==7 and $#values ==1){$yy=($values[1]-$values[0])/10;}
      if($item_i==3 and $line_no ==8 and $#values ==1){$zz=($values[1]-$values[0])/10;}

      if ($line_no<$TRJ_COORD_START and $line_no>0)
      { 
         if ($line_no==2) {
      #print LAMMPS2GRO "LAMMPS to gro file generated by wlamp2gro.pl. t=$values[0] \n";}
      $title = "LAMMPS to gro file generated by wlamp2gro.pl. t=";
      $time = $values[0];
      #write;
      }
         elsif ($line_no==4) {
      #print LAMMPS2GRO "$values[0]\n";}
      #print "$values[0]\n";
      $max_num = $values[0];
      #write;
      }
      }#end if ($_<$TRJ_COORD_START)
      else
      {
         for ($j=0;$j<=$#values;$j++)
         {
            if($j==0) #j==0: id in dump file; get the 1st column in gro file
            {
      #$tmp="$values[0]"."$elements[$values[1]][2]";
      #print LAMMPS2GRO "$tmp\t\t";
      #$res_num = $values[0];
      $res_nam = $elements[$values[1]][2];
      $atm_num = $values[0];
      $atm_nam = $elements[$values[1]][2];
      #write;
       }
            elsif($j==1) #the order no in element lists which is in data file MASSES section
            {  #$tmp="$elements[$values[1]][2]"."$elements[$values[1]][3]";#join element name and its order no.
               #print LAMMPS2GRO "$tmp\t\t";
               if($line_no!=0){$_=$line_no-$TRJ_COORD_START+1;}
               else{$_=$atom_no;}
               #print LAMMPS2GRO "$elements[$values[1]][2]\t$_\t";
#     print "elements[$values[1]][2]";
#     print "$_";
      $res_num = $_;
#     write;
            }#end  elsif($j==1) #the order no in element lists which ...
            elsif($j==3 )
      {
         $x = $xx*$values[$j];
         #print "$x";
      }

       elsif($j==4)
      {
         $y = $yy * $values[$j];
      }

       elsif($j==5)
      {
         $z = $zz * $values[$j];
      #  write;
      }
#        $x=$values[$j]*10;
#        $y=$values[$j]*10;
#        $z=$values[$j]*10;
#        print LAMMPS2GRO "$tmp\t";
#        print "$tmp/t";
         }#end for ($j=0;$j<=$#values;$j++)

         if($line_no==0)
    {
      #print LAMMPS2GRO "\n$xx\t$yy\t$zz\n";
      $dx = $xx;
      $dy = $yy;
      $dz = $zz;
      write;      
    }
         #else{print LAMMPS2GRO "\n";}
      }#end else of if($line_no<$TRJ_COORD_START)

}

close (INFILE);
close (OUTFILE);

}

